(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4642],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,b=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(b,a(a({ref:t},l),{},{components:n})):r.createElement(b,a({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2965:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:1},c={unversionedId:"basics/basic-inhibitors",id:"basics/basic-inhibitors",isDocsHomePage:!1,title:"Basic inhibitor setup",description:"Inhibitors are a great way to prevent users from using certain commands or all",source:"@site/docs/basics/basic-inhibitors.md",sourceDirName:"basics",slug:"/basics/basic-inhibitors",permalink:"/docs/basics/basic-inhibitors",editUrl:"https://github.com/naticoo/naticoo.github.io/edit/main/docs/basics/basic-inhibitors.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/docs/api/index"},next:{title:"Basic listeners setup",permalink:"/docs/basics/basic-listeners"}},u=[{value:"Creating a inhibitor",id:"creating-a-inhibitor",children:[]}],l={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inhibitors are a great way to prevent users from using certain commands or all"),(0,o.kt)("p",null,"In this tutoroial ill show how to them up"),(0,o.kt)("p",null,"this guide assumes that you are already using the intro bot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"//mod.ts\n...\n//You are going to add this under the command handler\ninhibitorHandler: NaticoInhibitorHandler = new NaticoInhibitorHandler(this, {\n        directory: './inhibitors',\n    });\n...\n    async start(token: string) {\n        //Set the inhibitor handler to be used\n        this.commandHandler.setInhibitorHandler(this.inhibitorHandler);\n        //Then load the commands as usual\n        await this.commandHandler.loadALL();\n        //And the inhibitors\n        await this.inhibitorHandler.loadALL();\n        return this.login(token);\n    }\n")),(0,o.kt)("h2",{id:"creating-a-inhibitor"},"Creating a inhibitor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"//inhibitors/notTricked.ts\nimport { DiscordenoMessage, NaticoCommand, NaticoInhibitor } from '../deps.ts';\nexport default class notTricked extends NaticoInhibitor {\n    constructor() {\n        super('notTricked', {\n            //Higher priotiry = earlier fire\n            priority: 1,\n        });\n    }\n\n    exec(message: DiscordenoMessage, command: NaticoCommand): boolean {\n        //This checks if the command thats being ran has the name ping\n        if (command.name == 'ping') {\n            //Checks if the user their id is the one from tricked and if it isnt returns true\n            //Returning true means the command is blocked\n            if (message.authorId !== 336465356304678913n) {\n                message.reply('You are not allowed to run this command');\n                return true;\n            }\n        }\n        //Otherwise it just runs the command\n        return false;\n    }\n}\n")),(0,o.kt)("p",null,"Resulting code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/naticoo/examplebot/tree/main/basic-inhibitors"},"here")))}d.isMDXComponent=!0}}]);