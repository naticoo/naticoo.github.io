(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[651],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=l(n),p=a,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||i;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6661:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),s=["components"],o={sidebar_position:1},c={unversionedId:"basics/basic-listeners",id:"basics/basic-listeners",isDocsHomePage:!1,title:"Basic listeners setup",description:"Listeners are a way of getting events and running code on them",source:"@site/docs/basics/basic-listeners.md",sourceDirName:"basics",slug:"/basics/basic-listeners",permalink:"/docs/basics/basic-listeners",editUrl:"https://github.com/naticoo/naticoo.github.io/edit/main/docs/basics/basic-listeners.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Basic inhibitor setup",permalink:"/docs/basics/basic-inhibitors"},next:{title:"Extending",permalink:"/docs/basics/extending"}},l=[{value:"Creating a listener",id:"creating-a-listener",children:[]}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Listeners are a way of getting events and running code on them"),(0,i.kt)("p",null,"this guide assumes that you are already using the intro bot"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"//mod.ts\n//Set the directory of the listener handler\n...\n    listenerHandler: NaticoListenerHandler = new NaticoListenerHandler(this, {\n        directory: './listeners',\n    });\n\n    async start(token: string) {\n        //Set the emitters\n        //Emitter must be set before loading any listeners otherwise it will cause errors\n        this.listenerHandler.setEmitters({\n            commandHandler: this.commandHandler,\n        });\n        //Loading the stuff\n        await this.listenerHandler.loadALL();\n        await this.commandHandler.loadALL();\n        return this.login(token);\n    }\n...\n\n")),(0,i.kt)("h3",{id:"creating-a-listener"},"Creating a listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"//listeners/ready.ts\nimport { NaticoListener } from '../deps.ts';\nexport default class ready extends NaticoListener {\n    constructor() {\n        super('ready', {\n            //The emitter of the event\n            emitter: 'client',\n            //THe event your listening for\n            event: 'ready',\n        });\n    }\n\n    exec() {\n        console.log('Bot has started');\n    }\n}\n")),(0,i.kt)("p",null,"This a listener for the command handler but you can also listen to other events, For example the commandStarted event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n    ConvertedOptions,\n    discordenoMessage,\n    NaticoCommand,\n    NaticoListener,\n} from '../deps.ts';\nexport default class commandStarted extends NaticoListener {\n    constructor() {\n        super('commandStarted', {\n            //In this example we are using the commandHandler that was specified in the mod.ts\n            emitter: 'commandHandler',\n            event: 'commandStarted',\n        });\n    }\n\n    exec(\n        message: discordenoMessage,\n        command: NaticoCommand,\n        args: ConvertedOptions\n    ) {\n        console.log('command:', command.id, 'started with args', args);\n    }\n}\n")),(0,i.kt)("p",null,"Resulting code can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/naticoo/examplebot/tree/main/basic-listeners"},"here")))}u.isMDXComponent=!0}}]);