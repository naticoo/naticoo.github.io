(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2435],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),m=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=m(t),d=a,f=l["".concat(i,".").concat(d)]||l[d]||p[d]||o;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=l;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var m=2;m<o;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},8590:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return m},default:function(){return p}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),s=["components"],c={},i={unversionedId:"examples/arguments/commands/advanced",id:"examples/arguments/commands/advanced",isDocsHomePage:!1,title:"advanced",description:"`ts",source:"@site/docs/examples/arguments/commands/advanced.md",sourceDirName:"examples/arguments/commands",slug:"/examples/arguments/commands/advanced",permalink:"/docs/examples/arguments/commands/advanced",editUrl:"https://github.com/naticoo/naticoo.github.io/edit/main/docs/examples/arguments/commands/advanced.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extending",permalink:"/docs/basics/extending"},next:{title:"ping",permalink:"/docs/examples/arguments/commands/ping"}},m=[],u={toc:m};function p(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { NaticoCommand, DiscordenoMessage, cache, Matches, DiscordenoMember } from "../../deps.ts";\nexport default class bigSay extends NaticoCommand {\n  constructor() {\n    super("bigsay", {\n      name: "bigsay",\n      aliases: ["bigsay"],\n      ownerOnly: true,\n      options: [\n        {\n          type: 3,\n          name: "user",\n          description: "The user you want to dm",\n          required: true,\n          match: Matches.rest,\n          customType: (message, content) => {\n            //The last item in the array will be the new rest\n            return [cache.members.get(BigInt(content.split(" ")[0])), content.split(" ").slice(1).join(" ")];\n          },\n        },\n        {\n          type: 3,\n          name: "text",\n          description: "text you want the bot to say",\n          required: true,\n          match: Matches.rest,\n          customType: (message, content) => {\n            return content.split(" ").reverse().join("\ud83e\udd80");\n          },\n        },\n      ],\n    });\n  }\n  async exec(message: DiscordenoMessage, { text, user }: { text: string; user: DiscordenoMember }) {\n    if (user) await user.sendDM(text);\n    message.reply(`dmed ${user.name} ${text}`);\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/naticoo/examplebot/blob/main/arguments/commands/advanced.ts"},"https://github.com/naticoo/examplebot/blob/main/arguments/commands/advanced.ts")))}p.isMDXComponent=!0}}]);